<VisualMicro>
  <Program Name="eventghost" Ext=".ino" Location="C:\Users\artur\Google Drive\artur\Arduino\eventghost">
    <Platform Name="arduino15x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="uno" Description="Arduino Uno" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\artur\Google Drive\artur\Arduino" name="Arduino Uno" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0x05" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.core="arduino" build.variant="standard" runtime.ide.path="C:\Program Files (x86)\Arduino" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="152" originalid="uno" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os -w -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os -w -fno-exceptions -ffunction-sections -fdata-sections -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -D{software}={runtime.ide.version} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -D{software}={runtime.ide.version} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} &quot;{build.path}/{archive_file}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.hex&quot;" recipe.size.regex="Total\s+([0-9]+).*" tools.avrdude.cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" tools.avrdude.config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" tools.avrdude.cmd.path.linux="{runtime.ide.path}/hardware/tools/avrdude" tools.avrdude.config.path.linux="{runtime.ide.path}/hardware/tools/avrdude.conf" tools.avrdude.upload.params.verbose="-v -v -v -v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v -v -v -v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v -v -v -v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v -v -v -v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.ide.path}/hardware/arduino/avr/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" ide.hint="Arduino 1.5 Ide" ide.location.key="Arduino15x" ide.location.ide.winreg="Arduino 1.5.x Application" ide.location.sketchbook.winreg="Arduino 1.5.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.location.preferences="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino\preferences.txt" ide.default.version="150" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.platformswithoutpackage="false" ide.sketchfolder.platforms.exclude="avr;sam" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="150" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" vm.debug="true" software="ARDUINO" ide.appid="arduino15x" location.sketchbook="C:\Users\artur\Google Drive\artur\Arduino" build.variant.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" includes=" -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\default\debuggers\VM_DBG&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\SPI&quot;  -I&quot;C:\Users\artur\Google Drive\artur\Arduino\libraries\Mirf&quot;  -I&quot;C:\Users\artur\Google Drive\artur\Arduino\libraries\RF24master&quot; " build.path="C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno" build.project_name="eventghost" build.variant.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" archive_file="core.a" object_file="C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\RF24master\RF24.cpp.o" source_file="C:\Users\artur\Google Drive\artur\Arduino\libraries\RF24master\RF24.cpp" object_files="&quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\eventghost.cpp.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\VM_DBG\VM_mem_check.c.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\VM_DBG\VM_DBG.cpp.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\SPI\SPI.cpp.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\Mirf\Mirf.cpp.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\Mirf\MirfHardwareSpiDriver.cpp.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\Mirf\MirfSpiDriver.cpp.o&quot; &quot;C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno\RF24master\RF24.cpp.o&quot; " upload.verbose="-q -q" path="C:\Program Files (x86)\Arduino\hardware\tools" cmd.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin/avrdude" config.path="C:\Program Files (x86)\Arduino\hardware/tools/avr/etc/avrdude.conf" serial.port.file="COM6" serial.port="COM6" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" />
    </Platform>
    <Compile IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\artur\AppData\Local\VMicro\Arduino\Builds\eventghost\uno" SketchName="eventghost" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 80;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;" IncludesDebug="1" IsCompiled="1" />
    <Debug DebugEnabled="1" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="eventghost.ino, line 112" Id="5edc0894-64dc-4b0b-97ce-d08d6bb3e512" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\artur\google drive\artur\arduino\eventghost\eventghost.ino" FileLine="112" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5edc0894-64dc-4b0b-97ce-d08d6bb3e512'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>105	  //Serial.println(Comm);
106	  //Serial.println(int(Comm[0]));
107	  int i=int(Comm[1])-48;
108	  int i1=int(Comm[2])-48;
109	  if (Comm[0]==65){
110	    
111	    int Temp=i*10+i1;
--&gt;112	    Serial.println(Temp);
113	    // Take the time, and send it.  This will block until complete
114	    radio.write( &amp;Temp, sizeof(int) );
115		radio.startListening();
116	
117		// Wait here until we get a response, or timeout (250ms)
118		unsigned long started_waiting_at = millis();
119		bool timeout = false;
120		while (!radio.available() &amp;&amp; !timeout)
121		if (millis() - started_waiting_at &gt; 250)
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>